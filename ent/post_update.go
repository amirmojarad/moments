// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"moments/ent/post"
	"moments/ent/predicate"
	"moments/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedDate sets the "created_date" field.
func (pu *PostUpdate) SetCreatedDate(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedDate(t)
	return pu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedDate(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedDate(*t)
	}
	return pu
}

// SetUpdatedDate sets the "updated_date" field.
func (pu *PostUpdate) SetUpdatedDate(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedDate(t)
	return pu
}

// SetNillableUpdatedDate sets the "updated_date" field if the given value is not nil.
func (pu *PostUpdate) SetNillableUpdatedDate(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetUpdatedDate(*t)
	}
	return pu
}

// SetDeletedDate sets the "deleted_date" field.
func (pu *PostUpdate) SetDeletedDate(t time.Time) *PostUpdate {
	pu.mutation.SetDeletedDate(t)
	return pu
}

// SetNillableDeletedDate sets the "deleted_date" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeletedDate(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetDeletedDate(*t)
	}
	return pu
}

// ClearDeletedDate clears the value of the "deleted_date" field.
func (pu *PostUpdate) ClearDeletedDate() *PostUpdate {
	pu.mutation.ClearDeletedDate()
	return pu
}

// SetPlainText sets the "plain_text" field.
func (pu *PostUpdate) SetPlainText(s string) *PostUpdate {
	pu.mutation.SetPlainText(s)
	return pu
}

// SetLikes sets the "likes" field.
func (pu *PostUpdate) SetLikes(u uint64) *PostUpdate {
	pu.mutation.ResetLikes()
	pu.mutation.SetLikes(u)
	return pu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikes(u *uint64) *PostUpdate {
	if u != nil {
		pu.SetLikes(*u)
	}
	return pu
}

// AddLikes adds u to the "likes" field.
func (pu *PostUpdate) AddLikes(u int64) *PostUpdate {
	pu.mutation.AddLikes(u)
	return pu
}

// ClearLikes clears the value of the "likes" field.
func (pu *PostUpdate) ClearLikes() *PostUpdate {
	pu.mutation.ClearLikes()
	return pu
}

// SetLinkURL sets the "link_url" field.
func (pu *PostUpdate) SetLinkURL(s string) *PostUpdate {
	pu.mutation.SetLinkURL(s)
	return pu
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLinkURL(s *string) *PostUpdate {
	if s != nil {
		pu.SetLinkURL(*s)
	}
	return pu
}

// ClearLinkURL clears the value of the "link_url" field.
func (pu *PostUpdate) ClearLinkURL() *PostUpdate {
	pu.mutation.ClearLinkURL()
	return pu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pu *PostUpdate) SetOwnerID(id int) *PostUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableOwnerID(id *int) *PostUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *PostUpdate) SetOwner(u *User) *PostUpdate {
	return pu.SetOwnerID(u.ID)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *PostUpdate) ClearOwner() *PostUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedDate,
		})
	}
	if value, ok := pu.mutation.UpdatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedDate,
		})
	}
	if value, ok := pu.mutation.DeletedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedDate,
		})
	}
	if pu.mutation.DeletedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: post.FieldDeletedDate,
		})
	}
	if value, ok := pu.mutation.PlainText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldPlainText,
		})
	}
	if value, ok := pu.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := pu.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if pu.mutation.LikesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: post.FieldLikes,
		})
	}
	if value, ok := pu.mutation.LinkURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldLinkURL,
		})
	}
	if pu.mutation.LinkURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldLinkURL,
		})
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetCreatedDate sets the "created_date" field.
func (puo *PostUpdateOne) SetCreatedDate(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedDate(t)
	return puo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedDate(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedDate(*t)
	}
	return puo
}

// SetUpdatedDate sets the "updated_date" field.
func (puo *PostUpdateOne) SetUpdatedDate(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedDate(t)
	return puo
}

// SetNillableUpdatedDate sets the "updated_date" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUpdatedDate(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetUpdatedDate(*t)
	}
	return puo
}

// SetDeletedDate sets the "deleted_date" field.
func (puo *PostUpdateOne) SetDeletedDate(t time.Time) *PostUpdateOne {
	puo.mutation.SetDeletedDate(t)
	return puo
}

// SetNillableDeletedDate sets the "deleted_date" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeletedDate(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetDeletedDate(*t)
	}
	return puo
}

// ClearDeletedDate clears the value of the "deleted_date" field.
func (puo *PostUpdateOne) ClearDeletedDate() *PostUpdateOne {
	puo.mutation.ClearDeletedDate()
	return puo
}

// SetPlainText sets the "plain_text" field.
func (puo *PostUpdateOne) SetPlainText(s string) *PostUpdateOne {
	puo.mutation.SetPlainText(s)
	return puo
}

// SetLikes sets the "likes" field.
func (puo *PostUpdateOne) SetLikes(u uint64) *PostUpdateOne {
	puo.mutation.ResetLikes()
	puo.mutation.SetLikes(u)
	return puo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikes(u *uint64) *PostUpdateOne {
	if u != nil {
		puo.SetLikes(*u)
	}
	return puo
}

// AddLikes adds u to the "likes" field.
func (puo *PostUpdateOne) AddLikes(u int64) *PostUpdateOne {
	puo.mutation.AddLikes(u)
	return puo
}

// ClearLikes clears the value of the "likes" field.
func (puo *PostUpdateOne) ClearLikes() *PostUpdateOne {
	puo.mutation.ClearLikes()
	return puo
}

// SetLinkURL sets the "link_url" field.
func (puo *PostUpdateOne) SetLinkURL(s string) *PostUpdateOne {
	puo.mutation.SetLinkURL(s)
	return puo
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLinkURL(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetLinkURL(*s)
	}
	return puo
}

// ClearLinkURL clears the value of the "link_url" field.
func (puo *PostUpdateOne) ClearLinkURL() *PostUpdateOne {
	puo.mutation.ClearLinkURL()
	return puo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (puo *PostUpdateOne) SetOwnerID(id int) *PostUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableOwnerID(id *int) *PostUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *PostUpdateOne) SetOwner(u *User) *PostUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *PostUpdateOne) ClearOwner() *PostUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Post)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedDate,
		})
	}
	if value, ok := puo.mutation.UpdatedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedDate,
		})
	}
	if value, ok := puo.mutation.DeletedDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedDate,
		})
	}
	if puo.mutation.DeletedDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: post.FieldDeletedDate,
		})
	}
	if value, ok := puo.mutation.PlainText(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldPlainText,
		})
	}
	if value, ok := puo.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if value, ok := puo.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: post.FieldLikes,
		})
	}
	if puo.mutation.LikesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: post.FieldLikes,
		})
	}
	if value, ok := puo.mutation.LinkURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldLinkURL,
		})
	}
	if puo.mutation.LinkURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldLinkURL,
		})
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
