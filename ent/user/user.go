// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldUpdatedDate holds the string denoting the updated_date field in the database.
	FieldUpdatedDate = "updated_date"
	// FieldDeletedDate holds the string denoting the deleted_date field in the database.
	FieldDeletedDate = "deleted_date"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// FieldIsStaff holds the string denoting the is_staff field in the database.
	FieldIsStaff = "is_staff"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeFollowers holds the string denoting the followers edge name in mutations.
	EdgeFollowers = "followers"
	// EdgeFollowing holds the string denoting the following edge name in mutations.
	EdgeFollowing = "following"
	// EdgeSenderPvChat holds the string denoting the sender_pv_chat edge name in mutations.
	EdgeSenderPvChat = "sender_pv_chat"
	// EdgeReceiverPvChat holds the string denoting the receiver_pv_chat edge name in mutations.
	EdgeReceiverPvChat = "receiver_pv_chat"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "user_posts"
	// FollowersTable is the table that holds the followers relation/edge. The primary key declared below.
	FollowersTable = "user_following"
	// FollowingTable is the table that holds the following relation/edge. The primary key declared below.
	FollowingTable = "user_following"
	// SenderPvChatTable is the table that holds the sender_pv_chat relation/edge.
	SenderPvChatTable = "private_chats"
	// SenderPvChatInverseTable is the table name for the PrivateChat entity.
	// It exists in this package in order to avoid circular dependency with the "privatechat" package.
	SenderPvChatInverseTable = "private_chats"
	// SenderPvChatColumn is the table column denoting the sender_pv_chat relation/edge.
	SenderPvChatColumn = "sender_id"
	// ReceiverPvChatTable is the table that holds the receiver_pv_chat relation/edge.
	ReceiverPvChatTable = "private_chats"
	// ReceiverPvChatInverseTable is the table name for the PrivateChat entity.
	// It exists in this package in order to avoid circular dependency with the "privatechat" package.
	ReceiverPvChatInverseTable = "private_chats"
	// ReceiverPvChatColumn is the table column denoting the receiver_pv_chat relation/edge.
	ReceiverPvChatColumn = "receiver_id"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "user_messages"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedDate,
	FieldUpdatedDate,
	FieldDeletedDate,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldFullName,
	FieldIsAdmin,
	FieldIsStaff,
}

var (
	// FollowersPrimaryKey and FollowersColumn2 are the table columns denoting the
	// primary key for the followers relation (M2M).
	FollowersPrimaryKey = []string{"user_id", "follower_id"}
	// FollowingPrimaryKey and FollowingColumn2 are the table columns denoting the
	// primary key for the following relation (M2M).
	FollowingPrimaryKey = []string{"user_id", "follower_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedDate holds the default value on creation for the "created_date" field.
	DefaultCreatedDate time.Time
	// DefaultUpdatedDate holds the default value on creation for the "updated_date" field.
	DefaultUpdatedDate time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin bool
	// DefaultIsStaff holds the default value on creation for the "is_staff" field.
	DefaultIsStaff bool
)
