// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"moments/ent/privatechat"
	"moments/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// PrivateChat is the model entity for the PrivateChat schema.
type PrivateChat struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate time.Time `json:"created_date,omitempty"`
	// UpdatedDate holds the value of the "updated_date" field.
	UpdatedDate time.Time `json:"updated_date,omitempty"`
	// DeletedDate holds the value of the "deleted_date" field.
	DeletedDate *time.Time `json:"deleted_date,omitempty"`
	// ReceiverID holds the value of the "receiver_id" field.
	ReceiverID int `json:"receiver_id,omitempty"`
	// SenderID holds the value of the "sender_id" field.
	SenderID int `json:"sender_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivateChatQuery when eager-loading is set.
	Edges PrivateChatEdges `json:"edges"`
}

// PrivateChatEdges holds the relations/edges for other nodes in the graph.
type PrivateChatEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *User `json:"receiver,omitempty"`
	// Chats holds the value of the chats edge.
	Chats []*Message `json:"chats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateChatEdges) SenderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// The edge sender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateChatEdges) ReceiverOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Receiver == nil {
			// The edge receiver was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Receiver, nil
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// ChatsOrErr returns the Chats value or an error if the edge
// was not loaded in eager-loading.
func (e PrivateChatEdges) ChatsOrErr() ([]*Message, error) {
	if e.loadedTypes[2] {
		return e.Chats, nil
	}
	return nil, &NotLoadedError{edge: "chats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivateChat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case privatechat.FieldID, privatechat.FieldReceiverID, privatechat.FieldSenderID:
			values[i] = new(sql.NullInt64)
		case privatechat.FieldCreatedDate, privatechat.FieldUpdatedDate, privatechat.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PrivateChat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivateChat fields.
func (pc *PrivateChat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privatechat.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case privatechat.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				pc.CreatedDate = value.Time
			}
		case privatechat.FieldUpdatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_date", values[i])
			} else if value.Valid {
				pc.UpdatedDate = value.Time
			}
		case privatechat.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_date", values[i])
			} else if value.Valid {
				pc.DeletedDate = new(time.Time)
				*pc.DeletedDate = value.Time
			}
		case privatechat.FieldReceiverID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_id", values[i])
			} else if value.Valid {
				pc.ReceiverID = int(value.Int64)
			}
		case privatechat.FieldSenderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value.Valid {
				pc.SenderID = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySender queries the "sender" edge of the PrivateChat entity.
func (pc *PrivateChat) QuerySender() *UserQuery {
	return (&PrivateChatClient{config: pc.config}).QuerySender(pc)
}

// QueryReceiver queries the "receiver" edge of the PrivateChat entity.
func (pc *PrivateChat) QueryReceiver() *UserQuery {
	return (&PrivateChatClient{config: pc.config}).QueryReceiver(pc)
}

// QueryChats queries the "chats" edge of the PrivateChat entity.
func (pc *PrivateChat) QueryChats() *MessageQuery {
	return (&PrivateChatClient{config: pc.config}).QueryChats(pc)
}

// Update returns a builder for updating this PrivateChat.
// Note that you need to call PrivateChat.Unwrap() before calling this method if this PrivateChat
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PrivateChat) Update() *PrivateChatUpdateOne {
	return (&PrivateChatClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the PrivateChat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PrivateChat) Unwrap() *PrivateChat {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivateChat is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PrivateChat) String() string {
	var builder strings.Builder
	builder.WriteString("PrivateChat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_date=")
	builder.WriteString(pc.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_date=")
	builder.WriteString(pc.UpdatedDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pc.DeletedDate; v != nil {
		builder.WriteString("deleted_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("receiver_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.ReceiverID))
	builder.WriteString(", ")
	builder.WriteString("sender_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.SenderID))
	builder.WriteByte(')')
	return builder.String()
}

// PrivateChats is a parsable slice of PrivateChat.
type PrivateChats []*PrivateChat

func (pc PrivateChats) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
