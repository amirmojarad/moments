// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"moments/ent/privatechat"
	"moments/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrivateChatCreate is the builder for creating a PrivateChat entity.
type PrivateChatCreate struct {
	config
	mutation *PrivateChatMutation
	hooks    []Hook
}

// SetFirstUserID sets the "first_user_id" field.
func (pcc *PrivateChatCreate) SetFirstUserID(i int) *PrivateChatCreate {
	pcc.mutation.SetFirstUserID(i)
	return pcc
}

// SetNillableFirstUserID sets the "first_user_id" field if the given value is not nil.
func (pcc *PrivateChatCreate) SetNillableFirstUserID(i *int) *PrivateChatCreate {
	if i != nil {
		pcc.SetFirstUserID(*i)
	}
	return pcc
}

// SetSecondUserID sets the "second_user_id" field.
func (pcc *PrivateChatCreate) SetSecondUserID(i int) *PrivateChatCreate {
	pcc.mutation.SetSecondUserID(i)
	return pcc
}

// SetNillableSecondUserID sets the "second_user_id" field if the given value is not nil.
func (pcc *PrivateChatCreate) SetNillableSecondUserID(i *int) *PrivateChatCreate {
	if i != nil {
		pcc.SetSecondUserID(*i)
	}
	return pcc
}

// SetFirstUser sets the "first_user" edge to the User entity.
func (pcc *PrivateChatCreate) SetFirstUser(u *User) *PrivateChatCreate {
	return pcc.SetFirstUserID(u.ID)
}

// SetSecondUser sets the "second_user" edge to the User entity.
func (pcc *PrivateChatCreate) SetSecondUser(u *User) *PrivateChatCreate {
	return pcc.SetSecondUserID(u.ID)
}

// Mutation returns the PrivateChatMutation object of the builder.
func (pcc *PrivateChatCreate) Mutation() *PrivateChatMutation {
	return pcc.mutation
}

// Save creates the PrivateChat in the database.
func (pcc *PrivateChatCreate) Save(ctx context.Context) (*PrivateChat, error) {
	var (
		err  error
		node *PrivateChat
	)
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateChatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PrivateChat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PrivateChatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PrivateChatCreate) SaveX(ctx context.Context) *PrivateChat {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PrivateChatCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PrivateChatCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PrivateChatCreate) check() error {
	return nil
}

func (pcc *PrivateChatCreate) sqlSave(ctx context.Context) (*PrivateChat, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcc *PrivateChatCreate) createSpec() (*PrivateChat, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivateChat{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: privatechat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: privatechat.FieldID,
			},
		}
	)
	if nodes := pcc.mutation.FirstUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatechat.FirstUserTable,
			Columns: []string{privatechat.FirstUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FirstUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.SecondUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatechat.SecondUserTable,
			Columns: []string{privatechat.SecondUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SecondUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrivateChatCreateBulk is the builder for creating many PrivateChat entities in bulk.
type PrivateChatCreateBulk struct {
	config
	builders []*PrivateChatCreate
}

// Save creates the PrivateChat entities in the database.
func (pccb *PrivateChatCreateBulk) Save(ctx context.Context) ([]*PrivateChat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PrivateChat, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivateChatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PrivateChatCreateBulk) SaveX(ctx context.Context) []*PrivateChat {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PrivateChatCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PrivateChatCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
