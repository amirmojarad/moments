// Code generated by ent, DO NOT EDIT.

package privatechat

const (
	// Label holds the string label denoting the privatechat type in the database.
	Label = "private_chat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstUserID holds the string denoting the first_user_id field in the database.
	FieldFirstUserID = "first_user_id"
	// FieldSecondUserID holds the string denoting the second_user_id field in the database.
	FieldSecondUserID = "second_user_id"
	// EdgeFirstUser holds the string denoting the first_user edge name in mutations.
	EdgeFirstUser = "first_user"
	// EdgeSecondUser holds the string denoting the second_user edge name in mutations.
	EdgeSecondUser = "second_user"
	// Table holds the table name of the privatechat in the database.
	Table = "private_chats"
	// FirstUserTable is the table that holds the first_user relation/edge.
	FirstUserTable = "private_chats"
	// FirstUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FirstUserInverseTable = "users"
	// FirstUserColumn is the table column denoting the first_user relation/edge.
	FirstUserColumn = "first_user_id"
	// SecondUserTable is the table that holds the second_user relation/edge.
	SecondUserTable = "private_chats"
	// SecondUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SecondUserInverseTable = "users"
	// SecondUserColumn is the table column denoting the second_user relation/edge.
	SecondUserColumn = "second_user_id"
)

// Columns holds all SQL columns for privatechat fields.
var Columns = []string{
	FieldID,
	FieldFirstUserID,
	FieldSecondUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
