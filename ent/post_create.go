// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"moments/ent/post"
	"moments/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
}

// SetCreatedDate sets the "created_date" field.
func (pc *PostCreate) SetCreatedDate(t time.Time) *PostCreate {
	pc.mutation.SetCreatedDate(t)
	return pc
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (pc *PostCreate) SetNillableCreatedDate(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetCreatedDate(*t)
	}
	return pc
}

// SetUpdatedDate sets the "updated_date" field.
func (pc *PostCreate) SetUpdatedDate(t time.Time) *PostCreate {
	pc.mutation.SetUpdatedDate(t)
	return pc
}

// SetNillableUpdatedDate sets the "updated_date" field if the given value is not nil.
func (pc *PostCreate) SetNillableUpdatedDate(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetUpdatedDate(*t)
	}
	return pc
}

// SetDeletedDate sets the "deleted_date" field.
func (pc *PostCreate) SetDeletedDate(t time.Time) *PostCreate {
	pc.mutation.SetDeletedDate(t)
	return pc
}

// SetNillableDeletedDate sets the "deleted_date" field if the given value is not nil.
func (pc *PostCreate) SetNillableDeletedDate(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetDeletedDate(*t)
	}
	return pc
}

// SetPlainText sets the "plain_text" field.
func (pc *PostCreate) SetPlainText(s string) *PostCreate {
	pc.mutation.SetPlainText(s)
	return pc
}

// SetLikes sets the "likes" field.
func (pc *PostCreate) SetLikes(u uint64) *PostCreate {
	pc.mutation.SetLikes(u)
	return pc
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (pc *PostCreate) SetNillableLikes(u *uint64) *PostCreate {
	if u != nil {
		pc.SetLikes(*u)
	}
	return pc
}

// SetLinkURL sets the "link_url" field.
func (pc *PostCreate) SetLinkURL(s string) *PostCreate {
	pc.mutation.SetLinkURL(s)
	return pc
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (pc *PostCreate) SetNillableLinkURL(s *string) *PostCreate {
	if s != nil {
		pc.SetLinkURL(*s)
	}
	return pc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pc *PostCreate) SetOwnerID(id int) *PostCreate {
	pc.mutation.SetOwnerID(id)
	return pc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pc *PostCreate) SetNillableOwnerID(id *int) *PostCreate {
	if id != nil {
		pc = pc.SetOwnerID(*id)
	}
	return pc
}

// SetOwner sets the "owner" edge to the User entity.
func (pc *PostCreate) SetOwner(u *User) *PostCreate {
	return pc.SetOwnerID(u.ID)
}

// Mutation returns the PostMutation object of the builder.
func (pc *PostCreate) Mutation() *PostMutation {
	return pc.mutation
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	var (
		err  error
		node *Post
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Post)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PostCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PostCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PostCreate) defaults() {
	if _, ok := pc.mutation.CreatedDate(); !ok {
		v := post.DefaultCreatedDate
		pc.mutation.SetCreatedDate(v)
	}
	if _, ok := pc.mutation.UpdatedDate(); !ok {
		v := post.DefaultUpdatedDate
		pc.mutation.SetUpdatedDate(v)
	}
	if _, ok := pc.mutation.Likes(); !ok {
		v := post.DefaultLikes
		pc.mutation.SetLikes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PostCreate) check() error {
	if _, ok := pc.mutation.CreatedDate(); !ok {
		return &ValidationError{Name: "created_date", err: errors.New(`ent: missing required field "Post.created_date"`)}
	}
	if _, ok := pc.mutation.UpdatedDate(); !ok {
		return &ValidationError{Name: "updated_date", err: errors.New(`ent: missing required field "Post.updated_date"`)}
	}
	if _, ok := pc.mutation.PlainText(); !ok {
		return &ValidationError{Name: "plain_text", err: errors.New(`ent: missing required field "Post.plain_text"`)}
	}
	return nil
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: post.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedDate,
		})
		_node.CreatedDate = value
	}
	if value, ok := pc.mutation.UpdatedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedDate,
		})
		_node.UpdatedDate = value
	}
	if value, ok := pc.mutation.DeletedDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldDeletedDate,
		})
		_node.DeletedDate = &value
	}
	if value, ok := pc.mutation.PlainText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldPlainText,
		})
		_node.PlainText = value
	}
	if value, ok := pc.mutation.Likes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: post.FieldLikes,
		})
		_node.Likes = value
	}
	if value, ok := pc.mutation.LinkURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldLinkURL,
		})
		_node.LinkURL = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.OwnerTable,
			Columns: []string{post.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	builders []*PostCreate
}

// Save creates the Post entities in the database.
func (pcb *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Post, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PostCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
